#
# Copyright (c) 2019-2020, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#
---

####################################################################
## SSL Certificate Check
####################################################################
# Test harness:
#   make it pass
#     ansible-playbook -i pre-install.inventory.ini viya_pre_install_playbook.yml --tags ssl_cert_check -e '{"ssl_dir_path": [ {  "path": "/etc/httpd" }, {"path": "/etc/apache2"}] }'
#   make it skip
#     ansible-playbook -i pre-install.inventory.ini viya_pre_install_playbook.yml --tags ssl_cert_check -e '{"ssl_dir_path": [ {  "path": "/etc/pki/tls/certs" }] }'
#   make it skip
#     ansible-playbook -i pre-install.inventory.ini viya_pre_install_playbook.yml --tags ssl_cert_check -e '{"ssl_dir_path": [ {  "path": "/etc/pki/tls/certs" }] }' --check
#   make it fail only if certificate exists and it is expire
#     ansible-playbook -i pre-install.inventory.ini viya_pre_install_playbook.yml --tags ssl_cert_check


- block:
  - name: "Get status of ssl configuration directories"
    shell: grep -rvxE '[[:blank:]]*([#;].*)?' {{ item.path}}| grep -E "SSLCertificateFile"|sed 's/^[ \t]*//;s/[ \t]*$//'|cut -f2- -d' '
    become: yes
    check_mode: no
    changed_when: False
    register: "ssl_exists"
    with_items:
        - "{{ssl_dir_path}}"
    tags:
      - ssl_cert_check

  - name: "Show the status of ssl configuration directories"
    debug: var=ssl_exists
    tags:
      - ssl_cert_check

  - name: "Get stat of Certificate file"
    stat:
      path: "{{ item.stdout }}"
    register: "certfile_exist"
    with_items:
       - "{{ssl_exists.results}}"
    tags:
      - ssl_cert_check



  - name: "Filter out the dir which has ssl certificate"
    set_fact:
       ssldir_list:
         "{{item.stat.path}}"
    with_items:
       - "{{certfile_exist.results}}"
    when: item.stat.exists
    tags:
      - ssl_cert_check

  - name: "Show the status of certificate file"
    debug: var=ssldir_list
    tags:
      - ssl_cert_check

  - name: "Show the status of certificate file"
    debug: msg="Certificate file exists"
    when: ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: "Show the status of file"
    debug: msg="Certificate file does not exist, skipping ssl certificate check"
    when: ssldir_list is undefined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: Check the certificate basic constraint
    shell: openssl x509 -noout -text -in {{ ssldir_list }}|grep -e "^\\s*CA:\(TRUE\|FALSE\)"|tr -d '[:space:]'|sed 's/CA:\(TRUE\|FALSE\)/\1/'
    register: ca_status
    check_mode: no
    changed_when: False
    when: ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: Show the basic constraint of the certificate
    debug: 
      msg: "basic constraint : {{ca_status.stdout}}"
    when: ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: Check the dates of the  certificate
    shell: openssl x509 -noout -dates -in {{ ssldir_list }} | cut -d= -f 2-
    register: date_status
    check_mode: no
    changed_when: False
    when: ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: Show the dates of the certificate
    debug: 
      msg: "Certificate Start Date and End Date : {{date_status.stdout_lines}}"
    when: ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: "filter out the start date of the certificate"
    set_fact:
       start_date:
         "{{ date_status.stdout_lines[0]}}"
    check_mode: no
    when: not ansible_check_mode and ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: "filter out the expiry date of the certificate"
    set_fact:
       end_date:
         "{{ date_status.stdout_lines[1]}}"
    check_mode: no
    when: not ansible_check_mode and ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: start date of the  certificate in epoch mode
    shell: date +%s --date "{{start_date}}"
    register: date_start
    check_mode: no
    changed_when: False
    when: not ansible_check_mode and ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: expiry date of the  certificate in epoch mode
    shell: date +%s --date "{{end_date}}"
    register: date_end
    check_mode: no
    changed_when: False
    when: not ansible_check_mode and ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  - name: Check if the certificate is Valid
    assert:
      that:
        - "ansible_date_time.epoch > date_start.stdout and ansible_date_time.epoch < date_end.stdout"
      msg: |
        If this machine currently includes the HTTP proxy installation, please check the validity of the certificate. The certificate was expired on : {{end_date}}. If you prefer to bypass this HTTP proxy check for now, add --skip-tags ssl_check.
    when: not ansible_check_mode and ssldir_list is defined and (ssldir_list | trim != '')
    tags:
      - ssl_cert_check

  tags:
    - ssl_check
