####################################################################
#### merge-viya-deployment-files.yml                            ####
####################################################################
####################################################################
#### Author: SAS Institute Inc.                                 ####
####                                                            ####
####################################################################
####################################################################
#
# This playbook compares the configuration files that were used
# in the previous SAS Viya deployment with files that will be used
# in the SAS Viya upgrade process and merges the user-modified values
# into the newer configuration files.
#
# The configuration files that this playbook handles are ansible.cfg, 
# vars.yml, tenantID_vars.yml, and inventory.ini.
#
# To see an index of the tasks that this playbook performs, run:
#      ansible-playbook merge-viya-deployment-files.yml --list-tasks
#
# To enable the playbook to make all the required changes and bring you
# to the desired state, run:
#        ansible-playbook merge-viya-deployment-files.yml
#
# with the following three options:
# -e "current_inventory_file=/viya3.5/sas_viya_playbook/myinventory.ini"
#
# The vars.yml and ansible.cfg deployment files must exist in the
# same directory.
#
# Optional: The tenantID_vars.yml files can be merged. Run:
# -e "tenantID_list=administration,cargo,maintenance"
#
# Optional: The default_host can be designated for newly created host groups. Run:
# -e "merge_default_host=deployTarget"
#
# Copyright (c) 2019-2020, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
#
####################################################################
---
- import_playbook: ../common/handle_hostgroup_hyphens.yml
  tags:
    - always

- name: Merge SAS Viya deployment files
  hosts: localhost
  gather_facts: no

  vars_files:
    - "{{ playbook_dir }}/../../../vars.yml"

  vars_prompt:
  - name: "current_inventory_file"
    prompt: "Specify a fully qualified file path of the current inventory file to merge with new deployment files"
    private: no

  tasks:
    - name: Generate the backup extension
      local_action: command date +%Y%m%d-%H%M%S
      register: timestamp

    - debug:
        msg: "{{ playbook_dir }}"

    - name: Verify that the specified current inventory file exists
      stat:
        path: "{{ current_inventory_file }}"
      register: current_inventory_file_path

    - name: Stop when the current inventory file does not exist
      assert:
        that: current_inventory_file_path.stat.exists and current_inventory_file_path.stat.isreg
        msg: "The specified location is not a fully qualified path name to an inventory file."

    - name: Inquire the deployment target in the current inventory file
      shell: 'ansible all -i "{{ current_inventory_file }}" --list-hosts'
      ignore_errors: yes
      register: deploymenttarget_ret

    - debug:
       msg: "{{ deploymenttarget_ret.stdout }}"

    - name: Set a deployTaget host name when a single machine deployment is detected
      set_fact:
        merge_default_host: "{{ deploymenttarget_ret.stdout_lines[1].strip() }}"
      run_once: yes
      when: "'hosts (1)' in deploymenttarget_ret.stdout" 

    - name: Define a variable for the merged_files folder
      set_fact:
        merged_folder: "{{ playbook_dir }}/merged_files/{{ timestamp.stdout }}"

    - name: Set a new Ansible configuration file variable
      set_fact:
        new_ansible_cfg: "{{ merged_folder }}/ansible.cfg"

    - name: Set an current_files_dir variable
      set_fact:
        current_files_dir: "{{ current_inventory_file | dirname }}"

    - name: Set an current ansible.cfg file variable
      set_fact:
        current_ansible_cfg: "{{ current_files_dir }}/ansible.cfg"

    - name: Set a merge_default_host variable
      set_fact:
        merge_default_host: "{{ merge_default_host }}"
      when: merge_default_host is defined and merge_default_host|length>0

    - name: Set a tenant ID list variable
      set_fact:
        tenant_id_string: "{{ tenantID_list }}"
      register: tenant_id_supplied
      when: tenantID_list is defined and tenantID_list|length>0

    - name: Convert the supplied tenantID_list string to an array list
      set_fact:
        tenant_id_list_array: "{{ tenant_id_string.split(',') }}"
      when: tenantID_list is defined

    - debug:
        msg: "{{ tenant_id_list_array }}"
      when: tenantID_list is defined

    - name: Verify that the current tenant_id_vars.yml file exists for the specified tenant ID
      stat:
        path: "{{ current_files_dir }}/{{ item }}_vars.yml"
      with_items: "{{ tenant_id_list_array }}"
      register: found_tenant_cfg
      when: tenantID_list is defined

    - debug:
        msg:
      with_items: "{{ found_tenant_cfg.results }}"
      when: tenantID_list is defined

    - name: Stop when the current tenant_vars.yml is not found in the directory where the current inventory file is saved
      fail:
         msg: |
           "The tenant_vars.yml was not found in the directory where the current inventory file is saved."
      with_items: "{{ found_tenant_cfg.results }}"
      when: tenantID_list is defined and item.stat.exists is defined and not item.stat.exists

    - name: Verify that the current Ansible configuration file exists
      stat:
        path: "{{ current_ansible_cfg }}"
      register: found_cfg

    - name: Stop when the current ansible.cfg is not found in the directory where the current inventory file is saved
      fail:
         msg: |
           "The current Ansible configuration file ansible.cfg was not found in the directory where the current inventory file is saved."
      when: (found_cfg.stat.exists == False)

    - name: Set vars.yml file variable
      set_fact:
        current_vars_yml: "{{ current_files_dir }}/vars.yml"

    - name: "Verify that the current vars.yml exists"
      stat:
        path: "{{ current_vars_yml }}"
      register: found_vars

    - name: Stop when the current vars.yml is not found in the directory where the current inventory file is saved
      fail:
         msg: |
           "The current vars.yml was not found in the folder where the current inventory file is saved."
      when: (found_vars.stat.exists == False)

    - name: Verify that the merged_folder directory exists
      stat:
        path: "{{ merged_folder }}"
      register: merged_folder_path

    - name: Create a folder where all the configuration files, log files, and diff text will be saved
      file:
        path: "{{ merged_folder }}"
        state: directory
        mode: "0755"
      when: merged_folder_path.stat.exists is defined and merged_folder_path.stat.exists | bool == false

    - name: Copy inventory.ini, ansible.cfg, and vars.yml to the merged_folder directory
      copy:
        src: "{{ playbook_dir }}/../../../{{ item }}"
        dest: "{{ merged_folder }}/"
      with_items:
        - inventory.ini
        - ansible.cfg
        - vars.yml

    - name: Set the original invenotry file name variable
      set_fact:
        temp_current_inventory_file: "{{ merged_folder }}/{{ current_inventory_file | basename + '_org' }}"

    - name: Copy the original inventory file to the merged_folder directory
      copy:
        src: "{{ current_inventory_file }}"
        dest: "{{ temp_current_inventory_file }}"

    - name: Copy sample_tenant_vars.yml to the merged_folder directory
      copy:
        src: "{{ playbook_dir }}/../../../samples/sample_tenant_vars.yml"
        dest: "{{ merged_folder }}/{{ item }}_vars.yml"
      with_items: "{{ tenant_id_list_array }}"
      when: tenantID_list is defined

    - name: Verify user Write permissions on Ansible configuration file
      file:
        path: "{{ new_ansible_cfg }}"
        mode: "u+w"

    - name: Check Ansible configuration file permissions
      stat:
        path: "{{ new_ansible_cfg }}"
      register: new_ansible_cfg_stat

    - name: Assert Write permissions on Ansible configuration file
      assert:
        that:
          - new_ansible_cfg_stat.stat.writeable
        msg: "Write permissions required on {{ new_ansible_cfg }}"

    - name: Check whether the host group name includes a hyphen (-) in the new inventory file
      lineinfile:
        path: "{{ playbook_dir }}/../../../samples/inventory.ini"
        regexp: 'sas-all:children'
        state: absent
      register: hyphen_in_new_host_group
      check_mode: yes
      failed_when: false

    - name: Check whether the host group name includes a hyphen (-) in the current inventory file
      lineinfile:
        path: "{{ current_inventory_file }}"
        regexp: 'sas-all:children'
        state: absent
      register: hyphen_in_old_host_group
      check_mode: yes
      failed_when: false

    - name: Make sure three casseerver host groups include an underscore instead of a hyphen in a temporary file
      replace:
        path: "{{ temp_current_inventory_file }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - regexp: 'sas-casserver-primary'
          line: 'sas_casserver_primary'
        - regexp: 'sas-casserver-worker'
          line: 'sas_casserver_worker'
        - regexp: 'sas-casserver-secondary'
          line: 'sas_casserver_secondary'
      when: hyphen_in_new_host_group.changed == False

    - name: Generate a cat vars.yml stdout
      command: cat "{{ current_vars_yml }}"
      register: catout

    - set_fact:
       merged_vars_yml: "{{ merged_folder }}/vars.yml"

    - name: Check whether the NODE_TYPE property exists in the pre merged vars.yml
      lineinfile:
        path: "{{ merged_vars_yml }}"
        regexp: 'NODE_TYPE:'
        state: absent
      register: node_type_exists
      check_mode: yes
      failed_when: false

    - name: Check whether the HA_PGPOOL_VIRTUAL_IP property exists in the pre merged vars.yml
      lineinfile:
        path: "{{ merged_vars_yml }}"
        regexp: 'HA_PGPOOL_VIRTUAL_IP:'
        state: absent
      register: ha_properties_exist
      check_mode: yes
      failed_when: false

    - name: Check whether the PERMS_OVERRIDE property exists in the pre merged vars.yml
      lineinfile:
        path: "{{ merged_vars_yml }}"
        regexp: 'PERMS_OVERRIDE:'
        state: absent
      register: perms_override_property_exists
      check_mode: yes
      failed_when: false

    - name: Check whether the PERMS_OVERRIDE property exists in the current vars.yml
      lineinfile:
        path: "{{ current_vars_yml }}"
        regexp: 'PERMS_OVERRIDE:'
        state: absent
      register: curr_perms_override_property_exists
      check_mode: yes
      failed_when: false

    - name: Check whether the HA_PGPOOL_HEARTBEAT_PORT property exists in the pre merged vars.yml
      lineinfile:
        path: "{{ merged_vars_yml }}"
        regexp: 'HA_PGPOOL_HEARTBEAT_PORT:'
        state: absent
      register: pgpool_heartbeat_property_exists
      check_mode: yes
      failed_when: false

    - name: Check whether the HA_PGPOOL_HEARTBEAT_PORT property exists in the current vars.yml
      lineinfile:
        path: "{{ current_vars_yml }}"
        regexp: 'HA_PGPOOL_HEARTBEAT_PORT:'
        state: absent
      register: curr_pgpool_heartbeat_property_exists
      check_mode: yes
      failed_when: false

    - set_fact:
       add_perms_override: true
      when: perms_override_property_exists.changed == True and curr_perms_override_property_exists.changed == False

    - set_fact:
       add_pgpool_heartbeat: true
      when: pgpool_heartbeat_property_exists.changed == True and curr_pgpool_heartbeat_property_exists.changed == False and ha_properties_exist.changed == True

    - name: Uncomment out the vars.yml properties in the merged folder if they are activated in the current vars.yml
      replace:
        path: "{{ merged_vars_yml }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      when: catout.stdout | regex_search ("(?<!#)" + item.line)
      with_items:
        - { regexp: '#appserver', line: 'appserver' }
        - { regexp: '#CAS_DISK_CACHE', line: 'CAS_DISK_CACHE' }
        - { regexp: '#CAS_SETTINGS', line: 'CAS_SETTINGS' }
        - { regexp: '#CAS_VIRTUAL_HOST', line: 'CAS_VIRTUAL_HOST' }
        - { regexp: '#CAS_VIRTUAL_PROTO', line: 'CAS_VIRTUAL_PROTO' }
        - { regexp: '#CAS_VIRTUAL_PORT', line: 'CAS_VIRTUAL_PORT' }
        - { regexp: '#casenv_admin_user', line: 'casenv_admin_user' }
        - { regexp: '#colocation', line: 'colocation' }
        - { regexp: '#FOUNDATION_CONFIGURATION', line: 'FOUNDATION_CONFIGURATION' }
        - { regexp: '#gcport', line: 'gcport' }
        - { regexp: '#httpport', line: 'httpport' }
        - { regexp: '#init', line: 'init' }
        - { regexp: '#port', line: 'port' }
        - { regexp: '#sasenv_cas_host', line: 'sasenv_cas_host' }
        - { regexp: '#sasenv_cas_port', line: 'sasenv_cas_port' }
        - { regexp: '#sasenv_connect_mgmt_port', line: 'sasenv_connect_mgmt_port' }
        - { regexp: '#sasenv_connect_port', line: 'sasenv_connect_port' }
        - { regexp: '#sasPort', line: 'sasPort' }
        - { regexp: '#sasstudio.appserver.https.port', line: 'sasstudio.appserver.https.port' }
        - { regexp: '#sasstudio.appserver.port', line: 'sasstudio.appserver.port' }
        - { regexp: '#SASV9_CONFIGURATION', line: 'SASV9_CONFIGURATION' }
        - { regexp: '#SERVICESBASEURL', line: 'SERVICESBASEURL' }
        - { regexp: '#SPAWNER_CONFIGURATION', line: 'SPAWNER_CONFIGURATION' }
        - { regexp: '#STUDIO_CONFIGURATION', line: 'STUDIO_CONFIGURATION' }
        - { regexp: '#webdms.workspaceServer.hostName', line: 'webdms.workspaceServer.hostName' }
        - { regexp: '#webdms.workspaceServer.port', line: 'webdms.workspaceServer.port' }
        - { regexp: '#WORKSPACESERVER_CONFIGURATION', line: 'WORKSPACESERVER_CONFIGURATION' }

    - name: Uncomment the vars.yml properties temporarily in the merged folder to save the comments
      replace:
        path: "{{ merged_vars_yml }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      when: catout.stdout | regex_search ( item.regexp)
      with_items:
        - { regexp: '#sasenv_cas_host', line: 'sasenv_cas_host' }
        - { regexp: '#sasenv_cas_port', line: 'sasenv_cas_port' }
        - { regexp: '#sasenv_connect_mgmt_port', line: 'sasenv_connect_mgmt_port' }
        - { regexp: '#sasenv_connect_port', line: 'sasenv_connect_port' }

    - name: Uncomment the #5: LD_LIBRARY_PATH properties temporarily in the merged folder to save the comments
      replace:
        path: "{{ merged_vars_yml }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      when: catout.stdout | regex_search ( item.regexp) and catout.stdout | regex_search ( "(?<!#)CAS_SETTINGS:")
      with_items:
        - { regexp: '#5: LD_LIBRARY_PATH', line: '5: LD_LIBRARY_PATH' }

    - name: Uncomment the #SERVICESBASEURL properties temporarily in the merged folder to save the comments
      replace:
        path: "{{ merged_vars_yml }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      when: catout.stdout | regex_search ( item.regexp) and catout.stdout | regex_search ( "(?<!#)CAS_CONFIGURATION:") and catout.stdout | regex_search ( "(?<!#)cfg:")
      with_items:
        - { regexp: '#SERVICESBASEURL', line: 'SERVICESBASEURL' }

    - name: Remove the SASV9_CONFIGURATION lines from the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item }}"
        state: absent
      when: catout.stdout | regex_search ("#SASV9_CONFIGURATION")
      with_items:
      - "# Creates a workspaceserver sasv9_deployment.cfg file"
      - "#SASV9_CONFIGURATION:"
      - "  #1: '/* Comment about OPTION */'"
      - "  #2: 'OPTION value'"

    - name: Remove the FOUNDATION_CONFIGURATION comments from the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item }}"
        state: absent
      when: catout.stdout | regex_search ("(?<!#)FOUNDATION_CONFIGURATION")
      with_items:
      - "  #1: '# Comment about KEY'"
      - "  #2: KEY=value"

    - name: Detect if backward merging is attempted
      assert:
        that: hyphen_in_new_host_group.changed == False
        msg: "Going backward from the host group with an underscore (_) in its name to the host group with a hyphen (-) in its name is not allowed."
      when: hyphen_in_old_host_group.changed == False and hyphen_in_new_host_group.changed == True

    - name: Perform deployment file merges
      merge_viya_deployment_files:
        hostvars: "{{ hostvars | to_json }}"
        current_inventory_file: "{{ temp_current_inventory_file }}"
        current_files_dir: "{{ current_files_dir }}"
        add_ha_properties: "{{ ha_properties_exist.changed }}"
        add_perms_override: "{{ add_perms_override is defined | default(false) }}"
        add_pgpool_heartbeat: "{{ add_pgpool_heartbeat is defined | default(false) }}"
        log_file_name: "{{ merged_folder }}/merge_viya_deployment_files.log"
        tenant_id_string: "{{ tenant_id_string if tenantID_list is defined | default(false) else omit }}"
        merge_default_host: "{{ merge_default_host if merge_default_host is defined | default(false) else omit }}"
      register: merge_result

    - name: Remove the --- line in the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: '---'
        state: absent

    - name: Insert the FOUNDATION_CONFIGURATION comments back to the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item }}"
        insertafter: 'FOUNDATION_CONFIGURATION:'
      when: catout.stdout | regex_search ("(?<!#)FOUNDATION_CONFIGURATION")
      with_items:
      - "  #2: KEY=value"
      - "  #1: '# Comment about KEY'"

    - name: Insert the CAS_SETTINGS comments back to the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item }}"
        insertafter: 'CAS_SETTINGS:'
      when: catout.stdout | regex_search ("(?<!#)CAS_SETTINGS")
      with_items:
      - "   #5: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ORACLE_HOME/lib:$JAVA_HOME/lib/amd64/server:$ODBCHOME/lib"
      - "   #4: JAVA_HOME=/usr/lib/jvm/jre-1.8.0"
      - "   #3: ORACLE_HOME=Oracle home directory"
      - "   #2: ODBCINI=$ODBCHOME/odbc.ini"
      - "   #1: ODBCHOME=ODBC home directory"

    - name: Generate a cat merged_vars_yml stdout
      command: cat "{{ merged_vars_yml }}"
      register: catmergedout

    - name: Insert the CAS_CONFIGURATION cfg section back to the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item.line }}"
        insertafter: '   cfg:'
      when: item.prop | string not in catmergedout
      with_items:
      - { prop: "SERVICESBASEURL:", line: "     #SERVICESBASEURL: 'https://loadbalancer.company.com'" }
      - { prop: "colocation:", line: "     #colocation: 'none'" }
      - { prop: "port:", line: "     #port: 5570" }
      - { prop: "httpport:", line: "     #httpport: 8777" }
      - { prop: "gcport:", line: "     #gcport: 0" }

    - name: Insert the SASV9_CONFIGURATION lines in the vars.yml file if they don' exist
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item }}"
        insertafter: EOF
      when: #SASV9_CONFIGURATION | string not in catmergedout
      with_items:
      - "# Creates a workspaceserver sasv9_deployment.cfg file"
      - "#SASV9_CONFIGURATION:"
      - "  #1: '/* Comment about OPTION */'"
      - "  #2: 'OPTION value'"

    - name: Comment out the temporarily uncommented vars.yml properties in the merged folder
      replace:
        path: "{{ merged_vars_yml }}"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      when: catout.stdout | regex_search ( item.regexp)
      with_items:
        - { regexp: 'sasenv_cas_host:', line: '#sasenv_cas_host:' }
        - { regexp: 'sasenv_cas_port:', line: '#sasenv_cas_port:' }
        - { regexp: 'sasenv_connect_mgmt_port:', line: '#sasenv_connect_mgmt_port:' }
        - { regexp: 'sasenv_connect_port:', line: '#sasenv_connect_port:' }

    - name: Insert the CAS_SETTINGS comments back to the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        line: "{{ item }}"
        insertbefore: '#sasenv_cas_host:'
      when: ## Foundation Configuration | string not in catmergedout
      with_items:
      - "\n##########################################################"
      - "## Foundation Configuration"
      - "##########################################################\n"

    - name: Remove the original inventory file from the merged_folder directory
      file:
        path: "{{ temp_current_inventory_file }}"
        state: 'absent'

    - name: Check whether the cpsdatasvrc property exists in the current inventory file
      lineinfile:
        path: "{{ current_inventory_file }}"
        regexp: 'cpsdatasvrc'
        state: absent
      register: cpspostgres_props_exist
      check_mode: yes
      failed_when: false

    # case 1: cpspgpoolc host group not existing in the current inventory file (pre 19w43) without cps props in the target vars.yml - no action required
    # case 2: cpspgpoolc host group not existing in the current inventory file (pre 19w43) with cps props but no cps props in the target vars.yml - move the cps props to the target
    # case 3: cpspgpoolc host group not existing in the current inventory file (pre 19w43) with cps props and HA props in the target vars.yml - move the cps props to the target
    # case 4: pgpoolc/cpspgpoolc host group exists in the current inventory file (post 19w43) with cps props but no HA props in the target vars.yml - update the cps props
    - name: Find the CommonPlanningService Invocation variables
      set_fact:
        cps_invocation: "{{ INVOCATION_VARIABLES['deployTarget']['cpspgpoolc'] | default([]) }}"

    # case 2-1
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        marker: "<!-- {mark} Modify the deploymentTarget name -->"
        insertafter: "INVOCATION_VARIABLES"
        block: |3
              ? choose-target-host:
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   NODE_TYPE: P
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and ha_properties_exist.changed == False and merge_default_host is undefined

    # case 2-2
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        insertafter: "{{ merge_default_host }}:"
        block: |3
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   NODE_TYPE: P
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and ha_properties_exist.changed == False and merge_default_host is defined

    # case 3-1-1
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        marker: "<!-- {mark} Modify the deploymentTarget name -->"
        insertafter: "INVOCATION_VARIABLES"
        block: |3
              ? choose-target-host:
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - HA_PGPOOL_VIRTUAL_IP: ''
                   HA_PGPOOL_WATCHDOG_PORT: ''
                   POOL_NUMBER: '0'
                   PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and ha_properties_exist.changed == True and merge_default_host is undefined and perms_override_property_exists.changed == False

    # case 3-1-2
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        marker: "<!-- {mark} Modify the deploymentTarget name -->"
        insertafter: "INVOCATION_VARIABLES"
        block: |3
              ? choose-target-host:
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - HA_PGPOOL_VIRTUAL_IP: ''
                   HA_PGPOOL_WATCHDOG_PORT: ''
                   PERMS_OVERRIDE: 'false'
                   POOL_NUMBER: '0'
                   PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and ha_properties_exist.changed == True and merge_default_host is undefined and perms_override_property_exists.changed == True

    # case 3-2-1
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        insertafter: "{{ merge_default_host }}:"
        block: |3
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - HA_PGPOOL_VIRTUAL_IP: ''
                   HA_PGPOOL_WATCHDOG_PORT: ''
                   PERMS_OVERRIDE: 'false'
                   POOL_NUMBER: '0'
                   PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and ha_properties_exist.changed == True and merge_default_host is defined and perms_override_property_exists.changed == False

    # case 3-2-2
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        insertafter: "{{ merge_default_host }}:"
        block: |3
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - HA_PGPOOL_VIRTUAL_IP: ''
                   HA_PGPOOL_WATCHDOG_PORT: ''
                   PERMS_OVERRIDE: 'false'
                   POOL_NUMBER: '0'
                   PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and ha_properties_exist.changed == True and merge_default_host is defined and perms_override_property_exists.changed == True

    # case 3-2-3 For 19w43 to 23w44 adding cps
    - name: Move CommonPlanningService Invocation variables to INVOCATION_VARIABLES
      blockinfile:
        path: "{{ merged_vars_yml }}"
        insertafter: "{{ merge_default_host }}:"
        block: |3
                 cpsdatasvrc:
                 - NODE_NUMBER: '0'
                   PG_PORT: '5442'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
                 cpspgpoolc:
                 - HA_PGPOOL_VIRTUAL_IP: ''
                   HA_PGPOOL_WATCHDOG_PORT: ''
                   HA_PGPOOL_HEARTBEAT_PORT: ''
                   PERMS_OVERRIDE: 'false'
                   POOL_NUMBER: '0'
                   PCP_PORT: '5440'
                   PGPOOL_PORT: '5441'
                   SANMOUNT: '{{ "{{ SAS_CONFIG_ROOT }}/data/sasdatasvrc" }}'
                   SERVICE_NAME: cpspostgres
      when: cps_invocation|length > 0 and cpspostgres_props_exist.changed == False and merge_default_host is defined and curr_pgpool_heartbeat_property_exists.changed == False and ha_properties_exist.changed == True

    - name: Check whether the NODE_TYPE property exists in the merged vars.yml
      lineinfile:
        path: "{{ merged_vars_yml }}"
        regexp: 'NODE_TYPE:'
        state: absent
      register: merged_node_type_exists
      check_mode: yes
      failed_when: false

    - name: Remove the NODE_TYPE line from the vars.yml file
      lineinfile:
        path: "{{ merged_vars_yml }}"
        regexp: 'NODE_TYPE:'
        state: absent
      when: node_type_exists.changed == False and merged_node_type_exists.changed == True

    # case 4
    # python script inserts the new HA properties

    - name: Replace the old pgpools property with a new one in the merged vars.yml
      replace:
        path: "{{ merged_vars_yml }}"
        regexp: "- PCP_PORT:"
        replace: "  PCP_PORT:"
      when: ha_properties_exist.changed == True

    - name: Make sure all host groups include an underscore instead of a hyphen
      replace:
        path: "{{ merged_folder }}/inventory.ini"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.line }}"
      with_items:
        - regexp: 'sas-all:children'
          line: 'sas_all:children'
        - regexp: 'sas-casserver-primary'
          line: 'sas_casserver_primary'
        - regexp: 'sas-casserver-worker'
          line: 'sas_casserver_worker'
        - regexp: 'sas-casserver-secondary'
          line: 'sas_casserver_secondary'
      when: hyphen_in_new_host_group.changed == False 

    - name: Check if the host_vars folder exists in the current playbook folder
      stat:
        path: "{{ current_files_dir }}/host_vars"
      register: host_vars_folder

    - name: Copy the host_vars folder to the merged folder
      copy:
        src: "{{ host_vars_folder.stat.path }}"
        dest: "{{ merged_folder }}"
      when: host_vars_folder.stat.exists and host_vars_folder.stat.isdir

    - name: Check if the file sitedefault.yml exists in the <current playbook folder>/roles/consul/files folder
      stat:
        path: "{{ current_files_dir }}/roles/consul/files/sitedefault.yml"
      register: sitedefault_file

    - name: Copy the sitedefault.yml to the merged folder when the file exists
      copy:
        src: "{{ sitedefault_file.stat.path }}"
        dest: "{{ merged_folder }}"
      when: sitedefault_file.stat.exists and sitedefault_file.stat.isreg

    - name: Show the differences between the original and new configuration files
      shell: diff -y -B --ignore-blank-lines "{{ item.current }}" "{{ item.new }}" > "{{ merged_folder }}/{{ item.filename }}"
      register: show_difference
      ignore_errors: true
      failed_when: false
      with_items:
        - { current: "{{ current_inventory_file }}", new: "{{ merged_folder }}/inventory.ini", filename: inventory_diff.txt }
        - { current: "{{ current_ansible_cfg }}", new: "{{ merged_folder }}/ansible.cfg", filename: ansible_cfg_diff.txt }
        - { current: "{{ current_vars_yml }}", new: "{{ merged_vars_yml }}", filename: vars_yml_diff.txt }

    - name: Show the differences between the original and new tenant configuration files
      shell: diff -y -B --ignore-blank-lines "{{ current_files_dir }}/{{ item }}_vars.yml" "{{ merged_folder }}/{{ item }}_vars.yml" > "{{ merged_folder }}/{{ item }}_vars_yml_diff.txt"
      register: show_difference
      ignore_errors: true
      failed_when: false
      with_items: "{{ tenant_id_list_array }}"
      when: tenantID_list is defined

    - debug:
        msg: "To review the differences between the original and new configuration files, open the files named filename_diff.txt in {{ merged_folder }}."

    - name: Check whether user action is needed for inventory.ini
      command: grep '^[^#]*?' "{{ merged_folder }}/inventory.ini"
      register: user_action_required_inventory
      ignore_errors: true
      failed_when: false
      no_log: true

    - name: Check whether user action is needed for vars.yml
      command: grep '^[^#]*?' "{{ merged_folder }}/vars.yml"
      register: user_action_required_vars
      ignore_errors: true
      failed_when: false
      no_log: true

    - pause:
       seconds: 15
       prompt: "[Warning] The inventory.ini file and vars.yml have been merged. However, you must specify a valid hostname for new host groups. Be sure to edit the target host correctly in the merged inventory.ini and vars.yml files at {{ merged_folder }} before you run the playbook again. Locate the string '? choose-target-host' in the merged file, and substitute the host name of a valid host machine that will be the hostname for the installation.\n\nAlternatively, you can specify a default hostname. Any new host groups are associated with the hostname that you specify. For example, include -e 'merge_default_host=deployTarget' when you run the playbook."
      when: user_action_required_inventory.rc == 0 and user_action_required_vars.rc == 0

    - pause:
       seconds: 15
       prompt: "[Warning] The inventory.ini file has been merged. However, you must specify a valid hostname for new host groups. Be sure to edit the target host correctly in the merged inventory.ini file at {{ merged_folder }} before you run the playbook again. Locate the string '? choose-target-host' in the merged file, and substitute the host name of a valid host machine that will be the hostname for the installation.\n\nAlternatively, you can specify a default hostname. Any new host groups are associated with the hostname that you specify. For example, include -e 'merge_default_host=deployTarget' when you run the playbook."
      when: user_action_required_inventory.rc == 0 and user_action_required_vars.rc != 0
